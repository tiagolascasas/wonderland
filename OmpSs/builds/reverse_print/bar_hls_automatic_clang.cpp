///////////////////
// Automatic IP Generated by OmpSs@FPGA compiler
///////////////////
// The below code is composed by:
//  1) User source code, which may be under any license (see in original source code)
//  2) OmpSs@FPGA toolchain code which is licensed under LGPLv3 terms and conditions
///////////////////
// Top IP Function: bar
// Accel. type hash: 7784186577
// Num. instances: 1
// Wrapper version: 13
///////////////////

#include <hls_stream.h>
#include <ap_int.h>
#include <ap_axi_sdata.h>
static ap_uint<64> __mcxx_taskId;

template <class T>
union __mcxx_cast
{
    unsigned long long int raw;
    T typed;
    __mcxx_cast() {}
};

struct mcxx_inaxis
{
    ap_uint<64> data;
};
typedef ap_axiu<64, 1, 1, 2> mcxx_outaxis;
void bar(const double *src, double *dst)
{
    *dst += *src;
}
void mcxx_write_out_port(const ap_uint<64> data, const ap_uint<2> dest, const ap_uint<1> last, hls::stream<mcxx_outaxis> &mcxx_outPort)
{
#pragma HLS inline
    mcxx_outaxis axis_word;
    axis_word.data = data;
    axis_word.dest = dest;
    axis_word.last = last;
    mcxx_outPort.write(axis_word);
}
void bar_wrapper(hls::stream<ap_uint<64>> &mcxx_inPort, hls::stream<mcxx_outaxis> &mcxx_outPort, const double *mcxx_src, double *mcxx_dst)
{
#pragma HLS interface ap_ctrl_none port = return
#pragma HLS interface axis port = mcxx_inPort
#pragma HLS interface axis port = mcxx_outPort
#pragma HLS interface m_axi port = mcxx_src
#pragma HLS interface m_axi port = mcxx_dst
    mcxx_inPort.read(); // command word
    __mcxx_taskId = mcxx_inPort.read();
    ap_uint<64> __mcxx_parent_taskId = mcxx_inPort.read();
    const double *src;
    double *dst;
    {
#pragma HLS protocol fixed
        {
            ap_uint<8> mcxx_flags_0;
            ap_uint<64> mcxx_offset_0;
            mcxx_flags_0 = mcxx_inPort.read()(7, 0);
            ap_wait();
            mcxx_offset_0 = mcxx_inPort.read();
            src = mcxx_src + mcxx_offset_0 / sizeof(const double);
        }
        ap_wait();
        {
            ap_uint<8> mcxx_flags_1;
            ap_uint<64> mcxx_offset_1;
            mcxx_flags_1 = mcxx_inPort.read()(7, 0);
            ap_wait();
            mcxx_offset_1 = mcxx_inPort.read();
            dst = mcxx_dst + mcxx_offset_1 / sizeof(double);
        }
        ap_wait();
    }
    bar(src, dst);
    {
#pragma HLS protocol fixed
        ap_uint<64> header = 0x03;
        ap_wait();
        mcxx_write_out_port(header, 0, 0, mcxx_outPort);
        ap_wait();
        mcxx_write_out_port(__mcxx_taskId, 0, 0, mcxx_outPort);
        ap_wait();
        mcxx_write_out_port(__mcxx_parent_taskId, 0, 1, mcxx_outPort);
        ap_wait();
    }
}
