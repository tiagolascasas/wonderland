///////////////////
// Automatic IP Generated by OmpSs@FPGA compiler
///////////////////
// The below code is composed by:
//  1) User source code, which may be under any license (see in original source code)
//  2) OmpSs@FPGA toolchain code which is licensed under LGPLv3 terms and conditions
///////////////////
// Top IP Function: foo
// Accel. type hash: 7225616482
// Num. instances: 1
// Wrapper version: 13
///////////////////

#include <hls_stream.h>
#include <ap_int.h>
#include <ap_axi_sdata.h>
static ap_uint<64> __mcxx_taskId;

template <class T>
union __mcxx_cast
{
    unsigned long long int raw;
    T typed;
    __mcxx_cast() {}
};

struct mcxx_inaxis
{
    ap_uint<64> data;
};
typedef ap_axiu<64, 1, 1, 2> mcxx_outaxis;

struct __fpga_copyinfo_t
{
    unsigned long long int copy_address;
    unsigned char arg_idx;
    unsigned char flags;
    unsigned int size;
};
void mcxx_task_create(const ap_uint<64> type, const ap_uint<8> instanceNum, const ap_uint<8> numArgs, const unsigned long long int args[], const ap_uint<8> numDeps, const unsigned long long int deps[], const ap_uint<8> numCopies, const __fpga_copyinfo_t copies[], hls::stream<mcxx_outaxis> &mcxx_outPort);
void mcxx_taskwait(hls::stream<ap_uint<8>> &mcxx_spawnInPort, hls::stream<mcxx_outaxis> &mcxx_outPort);

template <typename T>
struct __mcxx_ptr_t
{
    T *ptr;
    unsigned long long int val;
    __mcxx_ptr_t(T *ptr, unsigned long long int val) : ptr(ptr), val(val) {}
    __mcxx_ptr_t() {}
    inline operator __mcxx_ptr_t<const T>() const
    {
        return __mcxx_ptr_t<const T>(ptr, val);
    }
    template <typename V>
    inline __mcxx_ptr_t<T> operator+(V const val) const
    {
        return __mcxx_ptr_t<T>(ptr, this->val + val * sizeof(T));
    }
    template <typename V>
    inline __mcxx_ptr_t<T> operator-(V const val) const
    {
        return __mcxx_ptr_t<T>(ptr, this->val - val * sizeof(T));
    }
    template <typename V>
    inline operator V() const { return (V)val; }
    T &operator[](long long int i) { return ptr[val / sizeof(T) + i]; }
};
void foo(__mcxx_ptr_t<const double> src, __mcxx_ptr_t<double> dst, hls::stream<ap_uint<8>> &mcxx_spawnInPort, hls::stream<mcxx_outaxis> &mcxx_outPort)
{
    {
        unsigned long long __mcxx_args[1];
        unsigned long long __mcxx_deps[1];
        __fpga_copyinfo_t __mcxx_copies[1];
        __mcxx_ptr_t<double> __mcxx_arg_0;
        __mcxx_arg_0 = dst;
        __mcxx_args[0U] = __mcxx_arg_0.val;
        __mcxx_copies[0U].copy_address = __mcxx_arg_0.val;
        __mcxx_copies[0U].arg_idx = 0U;
        __mcxx_copies[0U].flags = 1U;
        __mcxx_copies[0U].size = 1 * 8UL;
        __mcxx_ptr_t<double> __mcxx_dep_0;
        __mcxx_dep_0 = dst;
        __mcxx_deps[0U] = 1UL << 58UL | __mcxx_dep_0.val;
        mcxx_task_create(10522707492UL, 255U, 1U, __mcxx_args, 1U, __mcxx_deps, 1U, __mcxx_copies, mcxx_outPort);
    }
    mcxx_taskwait(mcxx_spawnInPort, mcxx_outPort);
    unsigned int i;
    for (i = 0; i < 5; i++)
    {
        {
            unsigned long long __mcxx_args[2];
            unsigned long long __mcxx_deps[2];
            __mcxx_ptr_t<const double> __mcxx_arg_0;
            __mcxx_arg_0 = src;
            __mcxx_args[0U] = __mcxx_arg_0.val;
            __mcxx_ptr_t<const double> __mcxx_dep_0;
            __mcxx_dep_0 = src;
            __mcxx_deps[0U] = 1UL << 58UL | __mcxx_dep_0.val;
            __mcxx_ptr_t<double> __mcxx_arg_1;
            __mcxx_arg_1 = dst;
            __mcxx_args[1U] = __mcxx_arg_1.val;
            __mcxx_ptr_t<double> __mcxx_dep_1;
            __mcxx_dep_1 = dst;
            __mcxx_deps[1U] = 2UL << 58UL | __mcxx_dep_1.val;
            mcxx_task_create(7784186577UL, 255U, 2U, __mcxx_args, 2U, __mcxx_deps, 0U, 0U, mcxx_outPort);
        }
        mcxx_taskwait(mcxx_spawnInPort, mcxx_outPort);
        {
            unsigned long long __mcxx_args[1];
            unsigned long long __mcxx_deps[1];
            __fpga_copyinfo_t __mcxx_copies[1];
            __mcxx_ptr_t<double> __mcxx_arg_0;
            __mcxx_arg_0 = dst;
            __mcxx_args[0U] = __mcxx_arg_0.val;
            __mcxx_copies[0U].copy_address = __mcxx_arg_0.val;
            __mcxx_copies[0U].arg_idx = 0U;
            __mcxx_copies[0U].flags = 1U;
            __mcxx_copies[0U].size = 1 * 8UL;
            __mcxx_ptr_t<double> __mcxx_dep_0;
            __mcxx_dep_0 = dst;
            __mcxx_deps[0U] = 1UL << 58UL | __mcxx_dep_0.val;
            mcxx_task_create(10522707492UL, 255U, 1U, __mcxx_args, 1U, __mcxx_deps, 1U, __mcxx_copies, mcxx_outPort);
        }
        mcxx_taskwait(mcxx_spawnInPort, mcxx_outPort);
    }
}
void mcxx_write_out_port(const ap_uint<64> data, const ap_uint<2> dest, const ap_uint<1> last, hls::stream<mcxx_outaxis> &mcxx_outPort)
{
#pragma HLS inline
    mcxx_outaxis axis_word;
    axis_word.data = data;
    axis_word.dest = dest;
    axis_word.last = last;
    mcxx_outPort.write(axis_word);
}
void foo_wrapper(hls::stream<ap_uint<64>> &mcxx_inPort, hls::stream<mcxx_outaxis> &mcxx_outPort, hls::stream<ap_uint<8>> &mcxx_spawnInPort, const double *mcxx_src, double *mcxx_dst)
{
#pragma HLS interface ap_ctrl_none port = return
#pragma HLS interface axis port = mcxx_inPort
#pragma HLS interface axis port = mcxx_outPort
#pragma HLS interface axis port = mcxx_spawnInPort
#pragma HLS interface m_axi port = mcxx_src
#pragma HLS interface m_axi port = mcxx_dst
    mcxx_inPort.read(); // command word
    __mcxx_taskId = mcxx_inPort.read();
    ap_uint<64> __mcxx_parent_taskId = mcxx_inPort.read();
    __mcxx_ptr_t<const double> src;
    __mcxx_ptr_t<double> dst;
    {
#pragma HLS protocol fixed
        {
            ap_uint<8> mcxx_flags_0;
            ap_uint<64> mcxx_offset_0;
            mcxx_flags_0 = mcxx_inPort.read()(7, 0);
            ap_wait();
            mcxx_offset_0 = mcxx_inPort.read();
            src.val = mcxx_offset_0;
            src.ptr = mcxx_src;
        }
        ap_wait();
        {
            ap_uint<8> mcxx_flags_1;
            ap_uint<64> mcxx_offset_1;
            mcxx_flags_1 = mcxx_inPort.read()(7, 0);
            ap_wait();
            mcxx_offset_1 = mcxx_inPort.read();
            dst.val = mcxx_offset_1;
            dst.ptr = mcxx_dst;
        }
        ap_wait();
    }
    foo(src, dst, mcxx_spawnInPort, mcxx_outPort);
    {
#pragma HLS protocol fixed
        ap_uint<64> header = 0x03;
        ap_wait();
        mcxx_write_out_port(header, 0, 0, mcxx_outPort);
        ap_wait();
        mcxx_write_out_port(__mcxx_taskId, 0, 0, mcxx_outPort);
        ap_wait();
        mcxx_write_out_port(__mcxx_parent_taskId, 0, 1, mcxx_outPort);
        ap_wait();
    }
}
void mcxx_task_create(const ap_uint<64> type, const ap_uint<8> instanceNum, const ap_uint<8> numArgs, const unsigned long long int args[], const ap_uint<8> numDeps, const unsigned long long int deps[], const ap_uint<8> numCopies, const __fpga_copyinfo_t copies[], hls::stream<mcxx_outaxis> &mcxx_outPort)
{
#pragma HLS inline
    const ap_uint<2> destId = 2;
    ap_uint<64> tmp;
    tmp(15, 8) = numArgs;
    tmp(23, 16) = numDeps;
    tmp(31, 24) = numCopies;
    mcxx_write_out_port(tmp, destId, 0, mcxx_outPort);
    mcxx_write_out_port(__mcxx_taskId, destId, 0, mcxx_outPort);
    tmp(47, 40) = instanceNum;
    tmp(33, 0) = type(33, 0);
    mcxx_write_out_port(tmp, destId, 0, mcxx_outPort);
    for (ap_uint<4> i = 0; i < numDeps(3, 0); ++i)
    {
        mcxx_write_out_port(deps[i], destId, numArgs == 0 && numCopies == 0 && i == numDeps - 1, mcxx_outPort);
    }
    for (ap_uint<4> i = 0; i < numCopies(3, 0); ++i)
    {
        mcxx_write_out_port(copies[i].copy_address, destId, 0, mcxx_outPort);
        tmp(7, 0) = copies[i].flags;
        tmp(15, 8) = copies[i].arg_idx;
        tmp(63, 32) = copies[i].size;
        mcxx_write_out_port(tmp, destId, numArgs == 0 && i == numCopies - 1, mcxx_outPort);
    }
    for (ap_uint<4> i = 0; i < numArgs(3, 0); ++i)
    {
        mcxx_write_out_port(args[i], destId, i == numArgs - 1, mcxx_outPort);
    }
}

void mcxx_taskwait(hls::stream<ap_uint<8>> &mcxx_spawnInPort, hls::stream<mcxx_outaxis> &mcxx_outPort)
{
#pragma HLS inline
    ap_wait();
    mcxx_write_out_port(__mcxx_taskId, 3, 1, mcxx_outPort);
    ap_wait();
    mcxx_spawnInPort.read();
    ap_wait();
}
